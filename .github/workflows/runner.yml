name: Manage Runners (Org Level)

on:
  workflow_dispatch:
    inputs:
      runner_name:
        description: "Select base runner name"
        required: true
        type: choice
        options:
          - MS_JDK_17
          - DTS-Microservices
      count:
        description: "Number of runners to add/remove"
        required: true
        type: number
        default: 1
      operation:
        description: "Add or Subtract"
        required: true
        type: choice
        options:
          - Add
          - Subtract

jobs:
  manage:
    runs-on: ${{ github.event.inputs.runner_name }}_Executor

    steps:
      - name: Set variables
        shell: bash
        run: |
          set -euo pipefail
          echo "ORG=${{ github.repository_owner }}" >> "$GITHUB_ENV"
          echo "BASENAME=${{ github.event.inputs.runner_name }}" >> "$GITHUB_ENV"
          echo "COUNT=${{ github.event.inputs.count }}" >> "$GITHUB_ENV"
          echo "OP=${{ github.event.inputs.operation }}" >> "$GITHUB_ENV"

      - name: Pre-flight (jq/curl + helpful debug)
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Failed at line $LINENO"; exit 1' ERR
          command -v jq >/dev/null || { echo "jq is required on the executor host"; exit 1; }
          command -v curl >/dev/null || { echo "curl is required on the executor host"; exit 1; }
          echo "Running on executor: ${{ runner.name }} (labels: ${{ join(matrix.*, ',') }})" || true

      - name: Get base runner labels (from BASENAME, not Executor)
        id: labels
        shell: bash
        run: |
          set -euo pipefail
          JSON=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/orgs/$ORG/actions/runners?per_page=100")

          # Find the exact base runner (no suffix). Ignore *_Executor.
          LABELS=$(echo "$JSON" \
            | jq -r ".runners[] | select(.name==\"$BASENAME\") | .labels[].name" \
            | paste -sd "," -)

          if [ -z "$LABELS" ]; then
            echo "ERROR: Could not find labels for the base runner '$BASENAME' at org level."
            echo "Make sure an org-level runner named exactly '$BASENAME' exists."
            exit 1
          fi

          echo "LABELS=$LABELS" >> "$GITHUB_ENV"
          echo "Base labels: $LABELS"

      - name: Add Runners (org-level, nohup run.sh)
        if: env.OP == 'Add'
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Failed at line $LINENO"; exit 1' ERR
          echo "Adding $COUNT runner(s) for base '$BASENAME' ..."

          # Fetch all runner names
          NAMES=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/orgs/$ORG/actions/runners?per_page=100" \
            | jq -r '.runners[].name')
          
          # Case 1: existing runner without suffix (treat as _0)
          if echo "$NAMES" | grep -q "^${BASENAME}$"; then
            LAST_NUM=0
          else
            # Case 2: find highest numeric suffix among BASENAME_*
            LAST_NUM=$(echo "$NAMES" \
              | grep -E "^${BASENAME}_[0-9]+$" \
              | grep -oE '[0-9]+$' \
              | sort -n | tail -1)
            [ -z "${LAST_NUM:-}" ] && LAST_NUM=0
          fi
          
          # Create new runners incrementally
          for i in $(seq 1 "$COUNT"); do
            NEW_NUM=$((LAST_NUM + i))
            NEW_NAME="${BASENAME}_${NEW_NUM}"
            RUNNER_DIR="/mnt/actions-runner_${NEW_NUM}"
          
            echo ""
            echo "==> Creating org runner '$NEW_NAME' in '$RUNNER_DIR' with labels: $LABELS"

            # Create dir (try direct, else sudo -n)
            if ! mkdir -p "$RUNNER_DIR" 2>/dev/null; then
              sudo -n mkdir -p "$RUNNER_DIR"
              sudo -n chown "$USER:$USER" "$RUNNER_DIR"
            fi
            cd "$RUNNER_DIR"

            # Download exact version
            echo "Downloading runner v2.328.0 ..."
            curl -fL -o actions-runner-linux-x64-2.328.0.tar.gz \
              "https://github.com/actions/runner/releases/download/v2.328.0/actions-runner-linux-x64-2.328.0.tar.gz"
            tar xzf ./actions-runner-linux-x64-2.328.0.tar.gz
            rm -f actions-runner-linux-x64-2.328.0.tar.gz

            # Org registration token
            TOKEN=$(curl -sX POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
              "https://api.github.com/orgs/$ORG/actions/runners/registration-token" \
              | jq -r .token)
            if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
              echo "ERROR: Could not fetch org registration token"; exit 1
            fi

            # Configure as org-level runner (Default group, _work, labels from base)
            ./config.sh --unattended \
              --url "https://github.com/$ORG" \
              --token "$TOKEN" \
              --name "$NEW_NAME" \
              --labels "$LABELS" \
              --work _work

            # Install systemd service for this runner
            sudo ./svc.sh install
            
            # Enable it to start on boot
            sudo systemctl enable actions.runner.uptimestack.$NEW_NAME.service
            
            # Start the service now
            sudo ./svc.sh start
            
            # Optionally, check status
            sudo systemctl status actions.runner.uptimestack.$NEW_NAME.service
            echo "‚úÖ Runner $NEW_NAME installed as a systemd service and started."
          done

      - name: Subtract Runners (descending, skip busy, unregister, delete folder)
        if: env.OP == 'Subtract'
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Failed at line $LINENO"; exit 1' ERR
          echo "Removing $COUNT runner(s) for base '$BASENAME' ..."

          ORG_RUNNERS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/orgs/$ORG/actions/runners?per_page=100")

          # Candidate names: BASENAME_<number>, sorted DESC by suffix
          CANDIDATES=$(echo "$ORG_RUNNERS_JSON" \
            | jq -r '.runners[].name' \
            | grep -E "^${BASENAME}_[0-9]+$" \
            | sort -t_ -k2 -nr)

          if [ -z "${CANDIDATES:-}" ]; then
            echo "No suffixed runners found for '$BASENAME' to remove."
            exit 0
          fi

          REMOVED=0
          for R in $CANDIDATES; do
            [ "$REMOVED" -ge "$COUNT" ] && break

            BUSY=$(echo "$ORG_RUNNERS_JSON" \
              | jq -r ".runners[] | select(.name==\"$R\") | .busy")

            if [ "$BUSY" = "true" ]; then
              echo "‚è≠  $R is busy, skipping..."
              continue
            fi

            RID=$(echo "$ORG_RUNNERS_JSON" \
              | jq -r ".runners[] | select(.name==\"$R\") | .id")

            NUM=$(echo "$R" | grep -oE '[0-9]+$')
            RUNNER_DIR="/mnt/actions-runner_${NUM}"

            echo ""
            echo "==> Stopping and unregistering $R (id $RID), folder $RUNNER_DIR"

            # Stop background process if tracked
            if [ -f "$RUNNER_DIR/.runner.pid" ]; then
              PID=$(cat "$RUNNER_DIR/.runner.pid" || true)
              if [ -n "${PID:-}" ] && ps -p "$PID" >/dev/null 2>&1; then
                kill "$PID" || true
                for t in $(seq 1 10); do
                  ps -p "$PID" >/dev/null 2>&1 || break
                  sleep 1
                done
                ps -p "$PID" >/dev/null 2>&1 && kill -9 "$PID" || true
              fi
            else
              # Fallback: kill any Runner.Listener from this dir
              PIDS=$(ps -eo pid,cmd | awk -v d="$RUNNER_DIR" '$0 ~ d && $0 ~ /Runner\.Listener/ {print $1}')
              [ -n "${PIDS:-}" ] && kill $PIDS || true
              sleep 2
              PIDS2=$(ps -eo pid,cmd | awk -v d="$RUNNER_DIR" '$0 ~ d && $0 ~ /Runner\.Listener/ {print $1}')
              [ -n "${PIDS2:-}" ] && kill -9 $PIDS2 || true
            fi

            # Unregister using org remove-token (best-effort)
            if [ -x "$RUNNER_DIR/config.sh" ]; then
              REMOVE_TOKEN=$(curl -sX POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                "https://api.github.com/orgs/$ORG/actions/runners/remove-token" \
                | jq -r .token)
              if [ -n "$REMOVE_TOKEN" ] && [ "$REMOVE_TOKEN" != "null" ]; then
                (cd "$RUNNER_DIR" && ./config.sh remove --unattended --token "$REMOVE_TOKEN") || true
              fi
            fi

            # Extra safety: if still present, DELETE via API
            if [ -n "${RID:-}" ] && [ "$RID" != "null" ]; then
              curl -sS -X DELETE -H "Authorization: token ${{ secrets.GH_PAT }}" \
                "https://api.github.com/orgs/$ORG/actions/runners/$RID" >/dev/null || true
            fi

            # Remove folder
            if [ -d "$RUNNER_DIR" ]; then
              rm -rf "$RUNNER_DIR" 2>/dev/null || { sudo -n rm -rf "$RUNNER_DIR" || true; }
            fi

            echo "üóë  Removed $R and deleted $RUNNER_DIR"
            REMOVED=$((REMOVED + 1))
          done

          if [ "$REMOVED" -lt "$COUNT" ]; then
            echo "Warning: Only removed $REMOVED runner(s) (others were busy or not found)."
          fi



